apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .JobName }}"
  # {{- if .Backend.Namespace}}
  namespace: "{{.Backend.Namespace}}"
  # {{- end }}
  labels:
    woodpecker: "true"
    woodpecker-run: "{{.Backend.ID}}"
    woodpecker-job-id: "{{.JobID}}"
spec:
  # Number of times to run is one.
  backoffLimit: 0
  parallelism: 1
  template:
    metadata:
      labels:
        woodpecker: "true"
        woodpecker-run: "{{.Backend.ID}}"
        woodpecker-job-id: "{{.JobID}}"
        # {{- range $k, $v := .Step.Labels }}
        "{{- $k -}}": "{{- $v -}}"
        # {{- end }}
    spec:
      restartPolicy: Never
      # {{- if gt .Backend.TerminationGracePeriod 0 }}
      terminationGracePeriodSeconds: {{ .Backend.TerminationGracePeriod }}
      # {{- end }} 
      # {{- if ne (len .Step.Volumes) 0 }}
      volumes:
        # {{- range $mnt := .Mounts }}
        - name: "{{ $mnt.PVC.MountName }}"
          persistentVolumeClaim:
            claimName: "{{ $mnt.PVC.VolumeName }}"
        # {{- end }}
      # {{- end }}
      dnsConfig:
        nameservers:
          # {{- range $dns := .Step.DNS }}
          - "{{ $dns }}"
          # {{- end }}
        searches:
          # {{- range $search := .Step.DNSSearch }}
          - "{{ $search }}"
          # {{- end }}
      # {{- if ne (len .Backend.DetachedJobs) 0 }}
      hostAliases:
        # {{- range $job := .Backend.DetachedJobs }}
        - ip: "{{ $job.DetachedPodIP }}"
          hostnames:
            - "{{ $job.DetachedHostAlias }}"
        # {{- end }}
      # {{- end }}
      containers:
        - name: runner
          image: "{{ .Step.Image }}"
          # {{- if .Step.WorkingDir }}
          workingDir: "{{ .Step.WorkingDir }}"
          # {{- end }}
          imagePullPolicy: "{{ .PullPolicy }}"
          # {{- if .Step.Privileged }}
          securityContext:
            privileged: true
          # {{- end }}
          resources:
            # Request limits
            requests:
              memory: 400Mi
              cpu: 250m
            limits:
              memory: "{{ .Backend.JobMemoryLimit }}"
              cpu: "{{ .Backend.JobCPULimit }}"
          # {{- if .HasShellCommand }}
          command:
            - sh
            - -c
            - |
              {{- if ne .Backend.ContainerStartDelay 0 }}
              sleep {{ .Backend.ContainerStartDelay }}
              {{- end }}
              {{ .ShellCommand }}
          # {{- end -}}
          # {{- if ne (len .Step.Environment) 0 }}
          env:
            # {{- range $k, $v := .Step.Environment }}
            - name: "{{- $k -}}"
              value: "{{- $v -}}"
            # {{- end }}
          # {{- end }}

          # {{- if ne (len .Step.Volumes) 0 }}
          volumeMounts:
            # {{- range $mnt := .Mounts }}
            - name: "{{ $mnt.PVC.MountName }}"
              mountPath: "{{ $mnt.MountPath }}"
            # {{- end }}
          # {{- end }}
